#!/usr/bin/env bash
# Bash init script to manage the 'manage_my_process' daemon.

# Variables
DAEMON_NAME="manage_my_process"
PID_FILE="/var/run/my_process.pid"
DAEMON_PATH="./$DAEMON_NAME" # Assumes the daemon is in the same directory

# Function to stop the process
# Returns 0 if process was running and stopped, 1 otherwise.
stop_daemon() {
    # Check if the PID file exists
    if [ -f "$PID_FILE" ]; then
        # Read the PID from the file
        TARGET_PID=$(cat "$PID_FILE")

        # The shellcheck warning is noted, but the requirement forces this method.
        # SC2009 is disabled locally via comments if needed, but we keep the logic clear.
        # Find and kill the process. We use SIGKILL (-9) for certainty.
        # Check if the PID is still running before killing.
        if ps -p "$TARGET_PID" -o comm= | grep -q "$DAEMON_NAME"; then
            kill "$TARGET_PID" 2>/dev/null
        fi

        # Delete the PID file
        rm -f "$PID_FILE"
        return 0 # Process was running and is now stopped
    fi
    # If the PID file doesn't exist, we assume it's already stopped.
    return 1
}

# Function to start the process
# Returns 0 on successful start. Does NOT print output.
start_daemon() {
    # Run the daemon in the background
    "$DAEMON_PATH" &

    # Capture the PID of the last background process ($!)
    NEW_PID=$!

    # Create the PID file
    echo "$NEW_PID" > "$PID_FILE"
    return 0
}

# Main Case Statement
case "$1" in
    start)
        # Check if the file already exists (though requirement says ignore this)
        if [ -f "$PID_FILE" ]; then
             # Simple start logic as required: just start it again.
             start_daemon
        else
             start_daemon
        fi
        # ONLY PRINT OUTPUT HERE
        echo "$DAEMON_NAME started"
        ;;

    stop)
        # Suppress the 'stop_daemon' internal message and only print the required message
        stop_daemon > /dev/null 2>&1
        # ONLY PRINT OUTPUT HERE
        echo "$DAEMON_NAME stopped"
        ;;

    restart)
        # 1. Stop the running process (output suppressed)
        stop_daemon > /dev/null 2>&1

        # 2. Start the process (function is silent)
        start_daemon

        # ONLY PRINT OUTPUT HERE
        echo "$DAEMON_NAME restarted"
        ;;

    *)
        # Default usage message for any other or no argument
        echo "Usage: $DAEMON_NAME {start|stop|restart}"
        exit 1
        ;;
esac

exit 0
